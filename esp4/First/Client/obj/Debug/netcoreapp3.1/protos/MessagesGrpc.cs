// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/Messages.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Server.Protos {
  public static partial class EmployeeService
  {
    static readonly string __ServiceName = "EmployeeService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Server.Protos.GetByNoRequest> __Marshaller_GetByNoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.Protos.GetByNoRequest.Parser));
    static readonly grpc::Marshaller<global::Server.Protos.EmployeeResponse> __Marshaller_EmployeeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.Protos.EmployeeResponse.Parser));
    static readonly grpc::Marshaller<global::Server.Protos.GetAllRequest> __Marshaller_GetAllRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.Protos.GetAllRequest.Parser));
    static readonly grpc::Marshaller<global::Server.Protos.AddPhotoRequest> __Marshaller_AddPhotoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.Protos.AddPhotoRequest.Parser));
    static readonly grpc::Marshaller<global::Server.Protos.AddPhotoResponse> __Marshaller_AddPhotoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.Protos.AddPhotoResponse.Parser));
    static readonly grpc::Marshaller<global::Server.Protos.EmployeeRequest> __Marshaller_EmployeeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.Protos.EmployeeRequest.Parser));

    static readonly grpc::Method<global::Server.Protos.GetByNoRequest, global::Server.Protos.EmployeeResponse> __Method_GetByNo = new grpc::Method<global::Server.Protos.GetByNoRequest, global::Server.Protos.EmployeeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetByNo",
        __Marshaller_GetByNoRequest,
        __Marshaller_EmployeeResponse);

    static readonly grpc::Method<global::Server.Protos.GetAllRequest, global::Server.Protos.EmployeeResponse> __Method_GetAll = new grpc::Method<global::Server.Protos.GetAllRequest, global::Server.Protos.EmployeeResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAll",
        __Marshaller_GetAllRequest,
        __Marshaller_EmployeeResponse);

    static readonly grpc::Method<global::Server.Protos.AddPhotoRequest, global::Server.Protos.AddPhotoResponse> __Method_AddPhoto = new grpc::Method<global::Server.Protos.AddPhotoRequest, global::Server.Protos.AddPhotoResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "AddPhoto",
        __Marshaller_AddPhotoRequest,
        __Marshaller_AddPhotoResponse);

    static readonly grpc::Method<global::Server.Protos.EmployeeRequest, global::Server.Protos.EmployeeResponse> __Method_SaveAll = new grpc::Method<global::Server.Protos.EmployeeRequest, global::Server.Protos.EmployeeResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SaveAll",
        __Marshaller_EmployeeRequest,
        __Marshaller_EmployeeResponse);

    static readonly grpc::Method<global::Server.Protos.EmployeeRequest, global::Server.Protos.EmployeeResponse> __Method_Save = new grpc::Method<global::Server.Protos.EmployeeRequest, global::Server.Protos.EmployeeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Save",
        __Marshaller_EmployeeRequest,
        __Marshaller_EmployeeResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Server.Protos.MessagesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for EmployeeService</summary>
    public partial class EmployeeServiceClient : grpc::ClientBase<EmployeeServiceClient>
    {
      /// <summary>Creates a new client for EmployeeService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EmployeeServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for EmployeeService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EmployeeServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EmployeeServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EmployeeServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 單一響應
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Server.Protos.EmployeeResponse GetByNo(global::Server.Protos.GetByNoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetByNo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 單一響應
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Server.Protos.EmployeeResponse GetByNo(global::Server.Protos.GetByNoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetByNo, null, options, request);
      }
      /// <summary>
      /// 單一響應
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Server.Protos.EmployeeResponse> GetByNoAsync(global::Server.Protos.GetByNoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetByNoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 單一響應
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Server.Protos.EmployeeResponse> GetByNoAsync(global::Server.Protos.GetByNoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetByNo, null, options, request);
      }
      /// <summary>
      /// service streaming
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Server.Protos.EmployeeResponse> GetAll(global::Server.Protos.GetAllRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// service streaming
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Server.Protos.EmployeeResponse> GetAll(global::Server.Protos.GetAllRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAll, null, options, request);
      }
      /// <summary>
      /// client streaming
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Server.Protos.AddPhotoRequest, global::Server.Protos.AddPhotoResponse> AddPhoto(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddPhoto(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// client streaming
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Server.Protos.AddPhotoRequest, global::Server.Protos.AddPhotoResponse> AddPhoto(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_AddPhoto, null, options);
      }
      /// <summary>
      /// 雙向 streaming
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Server.Protos.EmployeeRequest, global::Server.Protos.EmployeeResponse> SaveAll(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveAll(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 雙向 streaming
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Server.Protos.EmployeeRequest, global::Server.Protos.EmployeeResponse> SaveAll(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SaveAll, null, options);
      }
      public virtual global::Server.Protos.EmployeeResponse Save(global::Server.Protos.EmployeeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Save(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Server.Protos.EmployeeResponse Save(global::Server.Protos.EmployeeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Save, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Server.Protos.EmployeeResponse> SaveAsync(global::Server.Protos.EmployeeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Server.Protos.EmployeeResponse> SaveAsync(global::Server.Protos.EmployeeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Save, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override EmployeeServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EmployeeServiceClient(configuration);
      }
    }

  }
}
#endregion
